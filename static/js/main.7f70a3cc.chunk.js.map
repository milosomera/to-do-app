{"version":3,"sources":["serviceWorker.js","MyContext.js","MyProvider.jsx","components/AddTaskForm.jsx","components/TaskRow.jsx","components/PendingTasks.jsx","components/DoneTasks.jsx","components/Homepage.jsx","components/Register.jsx","components/Login.jsx","App.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","MyContext","createContext","MyProvider","props","useState","localStorage","getItem","isLoggedIn","setIsLoggedIn","JSON","parse","user","setUser","tasks","setTasks","logUser","email","password","axios","post","data","error","alert","setItem","stringify","addTask","task","name","user_id","_id","newTask","doneTask","e","tasksCopy","map","currentTarget","id","status","patch","deleteTask","splice","indexOf","delete","state","logout","removeItem","useEffect","userTasks","length","Provider","value","children","AddTaskForm","useContext","taskInput","setTaskInput","Form","className","Control","type","placeholder","onChange","target","Button","onClick","TaskRow","key","variant","Fragment","PendingTasks","pendingTasks","filter","Container","Table","striped","hover","colSpan","DoneTasks","doneTasks","Homepage","to","replace","Register","registrationModal","hideModal","setName","setEmail","setPassword","confirmPassword","setConfirmPassword","matchPasswordError","setMatchPasswordError","navigate","useNavigate","submitHandler","Modal","show","onHide","size","aria-labelledby","backdrop","centered","Header","closeButton","Title","Body","Group","required","Text","Footer","Login","setRegistrationModal","App","path","element","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7f70a3cc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createContext} from \"react\";\r\n\r\nconst MyContext = createContext();\r\n\r\nexport default MyContext;","import React, { useState, useEffect } from \"react\";\r\nimport MyContext from \"./MyContext\";\r\nimport axios from \"axios\";\r\n\r\nconst MyProvider = (props) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(\r\n    localStorage.getItem(\"user\") ? true : false\r\n  );\r\n  const [user, setUser] = useState(\r\n    localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\r\n  );\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const logUser = async (email, password) => {\r\n    const { data: user } = await axios.post(\r\n      \"https://to-do-app-server.herokuapp.com/users/login\",\r\n      {\r\n        email,\r\n        password,\r\n      }\r\n    );\r\n    if (user.error) {\r\n      alert(user.error);\r\n    } else {\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n      setIsLoggedIn(true);\r\n      setUser(user);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"user\");\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  const addTask = async (task) => {\r\n    const newTask = await axios.post(\r\n      \"https://to-do-app-server.herokuapp.com/tasks/add\",\r\n      {\r\n        name: task,\r\n        user_id: user._id,\r\n      }\r\n    );\r\n    setTasks([...tasks, newTask]);\r\n  };\r\n\r\n  const doneTask = async (e) => {\r\n    const tasksCopy = [...tasks];\r\n    tasksCopy.map((task) => {\r\n      if (e.currentTarget.id === task._id) {\r\n        task.status = \"done\";\r\n      }\r\n      return tasksCopy;\r\n    });\r\n    await axios.patch(\r\n      \"https://to-do-app-server.herokuapp.com/tasks/done/\" + e.currentTarget.id,\r\n      {}\r\n    );\r\n    setTasks([...tasksCopy]);\r\n  };\r\n\r\n  const deleteTask = async (e) => {\r\n    const tasksCopy = [...tasks];\r\n    tasksCopy.map((task) => {\r\n      if (e.currentTarget.id === task._id) {\r\n        tasksCopy.splice(tasksCopy.indexOf(task), 1);\r\n      }\r\n      return tasksCopy;\r\n    });\r\n    await axios.delete(\r\n      `https://to-do-app-server.herokuapp.com/tasks/delete/${e.currentTarget.id}/${user._id}`\r\n    );\r\n    setTasks([...tasksCopy]);\r\n  };\r\n\r\n  const state = {\r\n    isLoggedIn,\r\n    user,\r\n    tasks,\r\n    setTasks,\r\n    logUser,\r\n    logout,\r\n    addTask,\r\n    doneTask,\r\n    deleteTask,\r\n  };\r\n\r\n  useEffect(() => {\r\n    const userTasks = async () => {\r\n      const {\r\n        data: { tasks: userTasks },\r\n      } = await axios(\r\n        \"https://to-do-app-server.herokuapp.com/users/\" + user._id\r\n      );\r\n      userTasks ? setTasks(userTasks) : setTasks([]);\r\n    };\r\n    userTasks();\r\n  }, [user, tasks.length]);\r\n\r\n  return (\r\n    <MyContext.Provider value={state}>{props.children}</MyContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MyProvider;\r\n","import React, { useContext, useState } from \"react\";\r\nimport MyContext from \"../MyContext\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\n\r\nconst AddTaskForm = () => {\r\n  const { addTask } = useContext(MyContext);\r\n  const [taskInput, setTaskInput] = useState(\"\");\r\n\r\n  const addTaskHandler = () => {\r\n    if (!taskInput) {\r\n      alert(\"This field can't be blank.\");\r\n    } else {\r\n      addTask(taskInput);\r\n      setTaskInput(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form className=\"position-relative\">\r\n      <Form.Control\r\n        type=\"text\"\r\n        value={taskInput}\r\n        placeholder=\"Make a task\"\r\n        onChange={(e) => setTaskInput(e.target.value)}\r\n      />\r\n      <Button\r\n        className=\"position-absolute top-50 end-0 translate-middle-y opacity-50\"\r\n        type=\"button\"\r\n        onClick={addTaskHandler}\r\n      >\r\n        Add Task\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddTaskForm;\r\n","import React, { useContext } from \"react\";\r\nimport MyContext from \"../MyContext\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { BsFillTrashFill, BsFillCheckCircleFill } from \"react-icons/bs\";\r\n\r\nconst TaskRow = (props) => {\r\n  const { deleteTask, doneTask } = useContext(MyContext);\r\n\r\n  let tasks = props.tasks.map((task) => {\r\n    if (task.status === \"pending\") {\r\n      return (\r\n        <tr key={task._id}>\r\n          <td>{task.name}</td>\r\n          <td className=\"text-end\">\r\n            <Button variant=\"success\" id={task._id} onClick={doneTask}>\r\n              <BsFillCheckCircleFill />\r\n            </Button>\r\n            <Button variant=\"danger\" id={task._id} onClick={deleteTask}>\r\n              <BsFillTrashFill />\r\n            </Button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    } else {\r\n      return (\r\n        <tr key={task.name}>\r\n          <td>{task.name}</td>\r\n          <td className=\"text-end\">\r\n            <Button variant=\"danger\" id={task._id} onClick={deleteTask}>\r\n              <BsFillTrashFill />\r\n            </Button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    }\r\n  });\r\n\r\n  return <React.Fragment>{tasks}</React.Fragment>;\r\n};\r\n\r\nexport default TaskRow;\r\n","import React, { useContext } from \"react\";\r\nimport MyContext from \"../MyContext\";\r\nimport { Container, Table } from \"react-bootstrap\";\r\nimport TaskRow from \"./TaskRow\";\r\n\r\nconst PendingTasks = () => {\r\n  const { tasks } = useContext(MyContext);\r\n\r\n  let pendingTasks = tasks.filter((task) => {\r\n    return task.status === \"pending\";\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      {pendingTasks.length === 0 ? (\r\n        <div className=\"text-center fw-bold\">No Pending Tasks</div>\r\n      ) : (\r\n        <Table striped hover>\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"2\" className=\"text-center\">\r\n                Pending Tasks\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <TaskRow tasks={pendingTasks} />\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PendingTasks;\r\n","import React, { useContext } from \"react\";\r\nimport MyContext from \"../MyContext\";\r\nimport { Container, Table } from \"react-bootstrap\";\r\nimport TaskRow from \"./TaskRow\";\r\n\r\nconst DoneTasks = () => {\r\n  const { tasks } = useContext(MyContext);\r\n\r\n  let doneTasks = tasks.filter((task) => {\r\n    return task.status === \"done\";\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      {doneTasks.length === 0 ? (\r\n        <div className=\"text-center fw-bold\">No Done Tasks</div>\r\n      ) : (\r\n        <Table striped hover>\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"2\" className=\"text-center\">\r\n                Done Tasks\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <TaskRow tasks={doneTasks} />\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DoneTasks;\r\n","import React, { useContext } from \"react\";\r\nimport MyContext from \"../MyContext\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Container, Button } from \"react-bootstrap\";\r\nimport AddTaskForm from \"./AddTaskForm\";\r\nimport PendingTasks from \"./PendingTasks\";\r\nimport DoneTasks from \"./DoneTasks\";\r\n\r\nconst Homepage = () => {\r\n  const {\r\n    isLoggedIn,\r\n    user: { name },\r\n    logout,\r\n  } = useContext(MyContext);\r\n\r\n  if (!isLoggedIn) {\r\n    return <Navigate to={\"to-do-app/login\"} replace={true} />;\r\n  }\r\n\r\n  return (\r\n    <Container id=\"body-container\">\r\n      <h1 className=\"position-relative\">\r\n        Hello {name}\r\n        <Button\r\n          className=\"position-absolute top-50 end-0 translate-middle-y\"\r\n          variant=\"dark\"\r\n          onClick={logout}\r\n        >\r\n          logout\r\n        </Button>\r\n      </h1>\r\n      <AddTaskForm />\r\n      <PendingTasks />\r\n      <DoneTasks />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst Register = ({ registrationModal, hideModal, logUser }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [matchPasswordError, setMatchPasswordError] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const submitHandler = async (e) => {\r\n    if (password !== confirmPassword) {\r\n      setMatchPasswordError(\"Passwords do not match\");\r\n    } else {\r\n      const { data: user } = await axios.post(\r\n        \"https://to-do-app-server.herokuapp.com/users/register\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n        }\r\n      );\r\n      if (user.error) {\r\n        alert(user.error);\r\n      } else {\r\n        await logUser(email, password);\r\n        navigate(\"/to-do-app\", { replace: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={registrationModal}\r\n      onHide={hideModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      backdrop=\"static\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Sign up</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form className=\"p-3 w-100\">\r\n          <Form.Group className=\"m-2\">\r\n            <Form.Control\r\n              type=\"name\"\r\n              placeholder=\"Name\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Form.Group className=\"m-2\">\r\n            <Form.Control\r\n              type=\"email\"\r\n              placeholder=\"Email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Form.Group className=\"m-2\">\r\n            <Form.Control\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Form.Group className=\"m-2\">\r\n            <Form.Control\r\n              type=\"password\"\r\n              placeholder=\"Confirm password\"\r\n              value={confirmPassword}\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n              required\r\n            />\r\n            <Form.Text>{matchPasswordError}</Form.Text>\r\n          </Form.Group>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <div className=\"text-center w-100\">\r\n          <Button\r\n            type=\"submit\"\r\n            className=\"w-50\"\r\n            variant=\"success\"\r\n            onClick={submitHandler}\r\n          >\r\n            Sign up\r\n          </Button>\r\n        </div>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React, { useState } from \"react\";\r\nimport { Container, Form, Button } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Register from \"./Register\";\r\n\r\nconst Login = ({ logUser }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [registrationModal, setRegistrationModal] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n  const showModal = () => setRegistrationModal(true);\r\n  const hideModal = () => setRegistrationModal(false);\r\n\r\n  const submitHandler = async () => {\r\n    await logUser(email, password);\r\n    navigate(\"/to-do-app\", { replace: true });\r\n  };\r\n\r\n  return (\r\n    <Container className=\"d-flex align-items-center justify-content-center fullScreen\">\r\n      <Form className=\"p-3 w-50 rounded-3 login\">\r\n        <Form.Group className=\"m-2\">\r\n          <Form.Control\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            required\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"m-2\">\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            required\r\n          />\r\n        </Form.Group>\r\n        <div className=\"text-center px-2\">\r\n          <Button onClick={submitHandler} className=\"w-100\">\r\n            Log in\r\n          </Button>\r\n          <div className=\"p-2 border-bottom\"></div>\r\n          <Button onClick={showModal} className=\"mt-3 bg-success\">\r\n            Create new account\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n      <Register\r\n        registrationModal={registrationModal}\r\n        hideModal={hideModal}\r\n        logUser={logUser}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useContext } from \"react\";\nimport MyContext from \"./MyContext\";\nimport { Routes, Route } from \"react-router-dom\";\nimport Homepage from \"./components/Homepage\";\nimport Login from \"./components/Login\";\nimport \"./App.css\";\n\nconst App = () => {\n  const { logUser } = useContext(MyContext);\n\n  return (\n    <Routes>\n      <Route path=\"/*\" element={<Homepage />} />\n      <Route path=\"/to-do-app/login\" element={<Login logUser={logUser} />} />\n    </Routes>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport MyProvider from \"./MyProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyProvider>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </MyProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}